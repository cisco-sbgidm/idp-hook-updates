name: CI

# CI runs once hourly, or can be triggered manually
on:
  repository_dispatch:
    types:
      - trigger-ci
      - trigger-release
  schedule:
    - cron:  '21 * * * *'

env:
  CI: true
  # Add color to jest tests output
  FORCE_COLOR: true

jobs:
  # Wait for up to a minute for previous run to complete, abort if not done by then
  pre-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: 'Block Concurrent Executions'
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ci:
    needs: pre-ci
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Install Node.js'
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
          registry-url: https://npm.pkg.github.com
      - name: 'Install Dependencies'
        run: |
          yarn install --frozen-lockfile
      - name: 'Lint'
        run: |
          yarn lint
      - name: 'Test'
        run: |
          yarn test
      - name: 'Build'
        run: |
          yarn zip
          yarn build:docker
      - name: 'update CI'
        env:
          AWS_DEFAULT_REGION: 'us-east-1'
          S3_BUCKET: 'sbg-sso-terraform-state'
        run: |
          docker run -i okta-duo-aws --command "update" --awsAccessKeyid "${{ secrets.AWS_ACCESS_KEY_ID }}" --awsSecretAccessKey "${{ secrets.AWS_SECRET_KEY }}" --awsRegion "${{ env.AWS_DEFAULT_REGION }}" --s3BucketName "${{ env.S3_BUCKET }}" --applicationPrefix "ci" --oktaEndpoint "${{ secrets.OKTA_ENDPOINT }}" --duoEndpoint  "${{ secrets.DUO_ENDPOINT }}"
      - name: 'Run API e2e Tests'
        env:
          OKTA_URL: ${{ secrets.OKTA_URL }}
          OKTA_TOKEN: ${{ secrets.OKTA_TOKEN }}
          DUO_IKEY: ${{ secrets.DUO_IKEY }}
          DUO_SKEY: ${{ secrets.DUO_SKEY }}
          DUO_HOST: ${{ secrets.DUO_HOST }}
          CI_USER: ${{ secrets.CI_USER }}
        run: |
          yarn ci
      - name: 'Release - Check Requested'
        if: (github.event.action == 'trigger-release')
        run: |
          echo ::set-env name=release_requested::true
          echo ::set-env name=release_mark::'Release'
      - name: 'Release - Fail if not Latest Version'
        if: env.release_requested && (github.event.client_payload.hash != github.sha)
        run: |
          echo "Cannot publish - requested git hash (${{github.event.client_payload.hash}}) is different from latest!"
          exit 1
      - name: 'Release - Create Version Number'
        if: env.release_requested
        run: |
          echo ::set-env name=VERSION::"`date '+%Y%m%d'`-`echo ${{github.sha}} | head -c 8`"
      - name: 'Release - Push Docker Image'
        if: env.release_requested
        run: |
          docker login docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker images
          IMAGE_ID=`docker images --format "{{.ID}}"  okta-duo-aws:latest`
          echo "Tagging docker image with tag: ${{ env.VERSION }}"
          docker tag ${IMAGE_ID} docker.pkg.github.com/cisco-sbgidm/idp-hook-updates/okta-duo-aws:${{ env.VERSION }}
          echo "Pushing..."
          docker push docker.pkg.github.com/cisco-sbgidm/idp-hook-updates/okta-duo-aws:${{ env.VERSION }}
          echo ""
          docker images
      - name: 'Release - Create Release'
        id: create_release
        uses: actions/create-release@latest
        if: env.release_requested
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body: |
            Docker container: https://github.com/${{ github.repository }}/packages/180895?version=${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: 'Release - Notify Slack'
        uses: homoluctus/slatify@v2.1.2
        if: env.release_requested && success()
        with:
          url: ${{ secrets.SLACK_WEBHOOK }}
          type: ${{ job.status }}
          job_name: Release of ${{ github.repository }} v${{ env.VERSION }} (${{ steps.create_release.outputs.html_url }})
          channel: 'general'
      - name: 'Notify Slack'
        uses: homoluctus/slatify@v2.1.2
        if: failure()
        with:
          url: ${{ secrets.SLACK_WEBHOOK }}
          type: ${{ job.status }}
          job_name: CI ${{ env.release_mark }} - ${{ github.repository }}
          channel: 'ci'
